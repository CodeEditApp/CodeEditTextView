{"includedArchiveIdentifiers":["codeedittextview.CodeEditTextView"],"interfaceLanguages":{"swift":[{"children":[{"title":"Text View","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textview\/init(coder:)","title":"init?(coder: NSCoder)","type":"init"},{"path":"\/documentation\/codeedittextview\/textview\/init(string:font:textcolor:lineheightmultiplier:wraplines:iseditable:isselectable:letterspacing:usesystemcursor:delegate:)","title":"init(string: String, font: NSFont, textColor: NSColor, lineHeightMultiplier: CGFloat, wrapLines: Bool, isEditable: Bool, isSelectable: Bool, letterSpacing: Double, useSystemCursor: Bool, delegate: TextViewDelegate?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textview\/acceptsfirstresponder","title":"var acceptsFirstResponder: Bool","type":"property"},{"path":"\/documentation\/codeedittextview\/textview\/allowsundo","title":"var allowsUndo: Bool","type":"property"},{"path":"\/documentation\/codeedittextview\/textview\/canbecomekeyview","title":"var canBecomeKeyView: Bool","type":"property"},{"path":"\/documentation\/codeedittextview\/textview\/contenttype","title":"var contentType: NSTextContentType?","type":"property"},{"path":"\/documentation\/codeedittextview\/textview\/delegate","title":"var delegate: TextViewDelegate?","type":"property"},{"path":"\/documentation\/codeedittextview\/textview\/documentrange","title":"var documentRange: NSRange","type":"property"},{"path":"\/documentation\/codeedittextview\/textview\/edgeinsets","title":"var edgeInsets: HorizontalEdgeInsets","type":"property"},{"path":"\/documentation\/codeedittextview\/textview\/emphasismanager","title":"var emphasisManager: EmphasisManager?","type":"property"},{"path":"\/documentation\/codeedittextview\/textview\/font","title":"var font: NSFont","type":"property"},{"path":"\/documentation\/codeedittextview\/textview\/iseditable","title":"var isEditable: Bool","type":"property"},{"path":"\/documentation\/codeedittextview\/textview\/isflipped","title":"var isFlipped: Bool","type":"property"},{"path":"\/documentation\/codeedittextview\/textview\/isselectable","title":"var isSelectable: Bool","type":"property"},{"path":"\/documentation\/codeedittextview\/textview\/kern","title":"var kern: CGFloat","type":"property"},{"path":"\/documentation\/codeedittextview\/textview\/layoutmanager","title":"var layoutManager: TextLayoutManager!","type":"property"},{"path":"\/documentation\/codeedittextview\/textview\/letterspacing","title":"var letterSpacing: Double","type":"property"},{"path":"\/documentation\/codeedittextview\/textview\/linebreakstrategy","title":"var lineBreakStrategy: LineBreakStrategy","type":"property"},{"path":"\/documentation\/codeedittextview\/textview\/lineheight","title":"var lineHeight: CGFloat","type":"property"},{"path":"\/documentation\/codeedittextview\/textview\/markedtextattributes","title":"var markedTextAttributes: [NSAttributedString.Key : Any]","type":"property"},{"path":"\/documentation\/codeedittextview\/textview\/needspaneltobecomekey","title":"var needsPanelToBecomeKey: Bool","type":"property"},{"path":"\/documentation\/codeedittextview\/textview\/overscrollamount","title":"var overscrollAmount: CGFloat","type":"property"},{"path":"\/documentation\/codeedittextview\/textview\/selectionmanager","title":"var selectionManager: TextSelectionManager!","type":"property"},{"path":"\/documentation\/codeedittextview\/textview\/string","title":"var string: String","type":"property"},{"path":"\/documentation\/codeedittextview\/textview\/textcolor","title":"var textColor: NSColor","type":"property"},{"path":"\/documentation\/codeedittextview\/textview\/textinsets","title":"var textInsets: HorizontalEdgeInsets","type":"property"},{"path":"\/documentation\/codeedittextview\/textview\/textstorage","title":"var textStorage: NSTextStorage!","type":"property"},{"path":"\/documentation\/codeedittextview\/textview\/typingattributes","title":"var typingAttributes: [NSAttributedString.Key : Any]","type":"property"},{"path":"\/documentation\/codeedittextview\/textview\/undomanager","title":"var undoManager: UndoManager?","type":"property"},{"path":"\/documentation\/codeedittextview\/textview\/usesystemcursor","title":"var useSystemCursor: Bool","type":"property"},{"path":"\/documentation\/codeedittextview\/textview\/wraplines","title":"var wrapLines: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textview\/acceptsfirstmouse(for:)","title":"func acceptsFirstMouse(for: NSEvent?) -> Bool","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/accessibilityframe(for:)","title":"func accessibilityFrame(for: NSRange) -> NSRect","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/accessibilityinsertionpointlinenumber()","title":"func accessibilityInsertionPointLineNumber() -> Int","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/accessibilitylabel()","title":"func accessibilityLabel() -> String?","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/accessibilityline(for:)","title":"func accessibilityLine(for: Int) -> Int","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/accessibilitynumberofcharacters()","title":"func accessibilityNumberOfCharacters() -> Int","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/accessibilityrange(for:)-40q9z","title":"func accessibilityRange(for: NSPoint) -> NSRange","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/accessibilityrange(for:)-70nmn","title":"func accessibilityRange(for: Int) -> NSRange","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/accessibilityrange(forline:)","title":"func accessibilityRange(forLine: Int) -> NSRange","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/accessibilityrole()","title":"func accessibilityRole() -> NSAccessibility.Role?","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/accessibilityselectedtext()","title":"func accessibilitySelectedText() -> String?","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/accessibilityselectedtextrange()","title":"func accessibilitySelectedTextRange() -> NSRange","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/accessibilityselectedtextranges()","title":"func accessibilitySelectedTextRanges() -> [NSValue]?","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/accessibilitystring(for:)","title":"func accessibilityString(for: NSRange) -> String?","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/accessibilityvalue()","title":"func accessibilityValue() -> Any?","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/accessibilityvisiblecharacterrange()","title":"func accessibilityVisibleCharacterRange() -> NSRange","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/addstoragedelegate(_:)","title":"func addStorageDelegate(NSTextStorageDelegate)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/becomefirstresponder()","title":"func becomeFirstResponder() -> Bool","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/copy(_:)","title":"func copy(AnyObject)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/cut(_:)","title":"func cut(AnyObject)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/delete(_:)","title":"func delete(AnyObject)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/deletebackward(_:)","title":"func deleteBackward(Any?)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/deletebackwardbydecomposingpreviouscharacter(_:)","title":"func deleteBackwardByDecomposingPreviousCharacter(Any?)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/deleteforward(_:)","title":"func deleteForward(Any?)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/deletetobeginningofline(_:)","title":"func deleteToBeginningOfLine(Any?)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/deletetobeginningofparagraph(_:)","title":"func deleteToBeginningOfParagraph(Any?)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/deletetoendofline(_:)","title":"func deleteToEndOfLine(Any?)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/deletetoendofparagraph(_:)","title":"func deleteToEndOfParagraph(Any?)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/deletewordbackward(_:)","title":"func deleteWordBackward(Any?)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/deletewordforward(_:)","title":"func deleteWordForward(Any?)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/draggingentered(_:)","title":"func draggingEntered(any NSDraggingInfo) -> NSDragOperation","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/draggingupdated(_:)","title":"func draggingUpdated(any NSDraggingInfo) -> NSDragOperation","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/draw(_:)","title":"func draw(NSRect)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/editselections(callback:)","title":"func editSelections(callback: (TextView, TextSelectionManager.TextSelection) -> Void)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/flagschanged(with:)","title":"func flagsChanged(with: NSEvent)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/hittest(_:)","title":"func hitTest(NSPoint) -> NSView?","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/insertnewline(_:)","title":"func insertNewline(Any?)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/inserttab(_:)","title":"func insertTab(Any?)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/inserttext(_:)","title":"func insertText(Any)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/isaccessibilityelement()","title":"func isAccessibilityElement() -> Bool","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/isaccessibilityenabled()","title":"func isAccessibilityEnabled() -> Bool","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/isaccessibilityfocused()","title":"func isAccessibilityFocused() -> Bool","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/keydown(with:)","title":"func keyDown(with: NSEvent)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/layout()","title":"func layout()","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/menu(for:)","title":"func menu(for: NSEvent) -> NSMenu?","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/mousedown(with:)","title":"func mouseDown(with: NSEvent)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/mousedragged(with:)","title":"func mouseDragged(with: NSEvent)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/mouseup(with:)","title":"func mouseUp(with: NSEvent)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/movedown(_:)","title":"func moveDown(Any?)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/movedownandmodifyselection(_:)","title":"func moveDownAndModifySelection(Any?)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/moveleft(_:)","title":"func moveLeft(Any?)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/moveleftandmodifyselection(_:)","title":"func moveLeftAndModifySelection(Any?)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/moveright(_:)","title":"func moveRight(Any?)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/moverightandmodifyselection(_:)","title":"func moveRightAndModifySelection(Any?)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/movetobeginningofdocument(_:)","title":"func moveToBeginningOfDocument(Any?)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/movetobeginningofdocumentandmodifyselection(_:)","title":"func moveToBeginningOfDocumentAndModifySelection(Any?)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/movetobeginningofparagraph(_:)","title":"func moveToBeginningOfParagraph(Any?)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/movetobeginningofparagraphandmodifyselection(_:)","title":"func moveToBeginningOfParagraphAndModifySelection(Any?)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/movetoendofdocument(_:)","title":"func moveToEndOfDocument(Any?)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/movetoendofdocumentandmodifyselection(_:)","title":"func moveToEndOfDocumentAndModifySelection(Any?)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/movetoendofparagraph(_:)","title":"func moveToEndOfParagraph(Any?)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/movetoendofparagraphandmodifyselection(_:)","title":"func moveToEndOfParagraphAndModifySelection(Any?)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/movetoleftendofline(_:)","title":"func moveToLeftEndOfLine(Any?)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/movetoleftendoflineandmodifyselection(_:)","title":"func moveToLeftEndOfLineAndModifySelection(Any?)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/movetorightendofline(_:)","title":"func moveToRightEndOfLine(Any?)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/movetorightendoflineandmodifyselection(_:)","title":"func moveToRightEndOfLineAndModifySelection(Any?)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/moveup(_:)","title":"func moveUp(Any?)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/moveupandmodifyselection(_:)","title":"func moveUpAndModifySelection(Any?)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/movewordleft(_:)","title":"func moveWordLeft(Any?)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/movewordleftandmodifyselection(_:)","title":"func moveWordLeftAndModifySelection(Any?)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/movewordright(_:)","title":"func moveWordRight(Any?)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/movewordrightandmodifyselection(_:)","title":"func moveWordRightAndModifySelection(Any?)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/pagedown(_:)","title":"func pageDown(Any?)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/pagedownandmodifyselection(_:)","title":"func pageDownAndModifySelection(Any?)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/pageup(_:)","title":"func pageUp(Any?)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/pageupandmodifyselection(_:)","title":"func pageUpAndModifySelection(Any?)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/paste(_:)","title":"func paste(AnyObject)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/performdragoperation(_:)","title":"func performDragOperation(any NSDraggingInfo) -> Bool","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/performkeyequivalent(with:)","title":"func performKeyEquivalent(with: NSEvent) -> Bool","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/preparecontent(in:)","title":"func prepareContent(in: NSRect)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/removestoragedelegate(_:)","title":"func removeStorageDelegate(NSTextStorageDelegate)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/replacecharacters(in:with:skipupdateselection:)-2kupp","title":"func replaceCharacters(in: NSRange, with: String, skipUpdateSelection: Bool)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/replacecharacters(in:with:skipupdateselection:)-476w4","title":"func replaceCharacters(in: [NSRange], with: String, skipUpdateSelection: Bool)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/resetcursorrects()","title":"func resetCursorRects()","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/resignfirstresponder()","title":"func resignFirstResponder() -> Bool","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/scrollselectiontovisible()","title":"func scrollSelectionToVisible()","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/scrolltorange(_:center:)","title":"func scrollToRange(NSRange, center: Bool)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/selectall(_:)","title":"func selectAll(Any?)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/selectcolumns(betweenpointa:pointb:)","title":"func selectColumns(betweenPointA: CGPoint, pointB: CGPoint)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/selectline(_:)","title":"func selectLine(Any?)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/selectword(_:)","title":"func selectWord(Any?)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/setaccessibilityfocused(_:)","title":"func setAccessibilityFocused(Bool)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/setaccessibilityselectedtextrange(_:)","title":"func setAccessibilitySelectedTextRange(NSRange)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/setaccessibilityselectedtextranges(_:)","title":"func setAccessibilitySelectedTextRanges([NSValue]?)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/setaccessibilityvalue(_:)","title":"func setAccessibilityValue(Any?)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/settext(_:)","title":"func setText(String)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/settextstorage(_:)","title":"func setTextStorage(NSTextStorage)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/setundomanager(_:)","title":"func setUndoManager(CEUndoManager)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/updateframeifneeded()","title":"func updateFrameIfNeeded() -> Bool","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/updatedviewport(_:)","title":"func updatedViewport(CGRect)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/viewdidendliveresize()","title":"func viewDidEndLiveResize()","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/viewwillmove(tosuperview:)","title":"func viewWillMove(toSuperview: NSView?)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/viewwillmove(towindow:)","title":"func viewWillMove(toWindow: NSWindow?)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/yank(_:)","title":"func yank(Any?)","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textview\/defaulttypingattributes","title":"static var defaultTypingAttributes: [NSAttributedString.Key : Any]","type":"property"},{"path":"\/documentation\/codeedittextview\/textview\/iscompatiblewithresponsivescrolling","title":"class var isCompatibleWithResponsiveScrolling: Bool","type":"property"},{"path":"\/documentation\/codeedittextview\/textview\/textdidchangenotification","title":"static let textDidChangeNotification: Notification.Name","type":"property"},{"path":"\/documentation\/codeedittextview\/textview\/textwillchangenotification","title":"static let textWillChangeNotification: Notification.Name","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textview\/draggingsession(_:endedat:operation:)","title":"func draggingSession(NSDraggingSession, endedAt: NSPoint, operation: NSDragOperation)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/draggingsession(_:movedto:)","title":"func draggingSession(NSDraggingSession, movedTo: NSPoint)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/draggingsession(_:sourceoperationmaskfor:)","title":"func draggingSession(NSDraggingSession, sourceOperationMaskFor: NSDraggingContext) -> NSDragOperation","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/draggingsession(_:willbeginat:)","title":"func draggingSession(NSDraggingSession, willBeginAt: NSPoint)","type":"method"}],"path":"\/documentation\/codeedittextview\/textview\/nsdraggingsource-implementations","title":"NSDraggingSource Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textview\/attributedstring()","title":"func attributedString() -> NSAttributedString","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/attributedsubstring(forproposedrange:actualrange:)","title":"func attributedSubstring(forProposedRange: NSRange, actualRange: NSRangePointer?) -> NSAttributedString?","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/baselinedeltaforcharacter(at:)","title":"func baselineDeltaForCharacter(at: Int) -> CGFloat","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/characterindex(for:)","title":"func characterIndex(for: NSPoint) -> Int","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/firstrect(forcharacterrange:actualrange:)","title":"func firstRect(forCharacterRange: NSRange, actualRange: NSRangePointer?) -> NSRect","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/fractionofdistancethroughglyph(for:)","title":"func fractionOfDistanceThroughGlyph(for: NSPoint) -> CGFloat","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/hasmarkedtext()","title":"func hasMarkedText() -> Bool","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/inserttext(_:replacementrange:)","title":"func insertText(Any, replacementRange: NSRange)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/markedrange()","title":"func markedRange() -> NSRange","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/selectedrange()","title":"func selectedRange() -> NSRange","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/setmarkedtext(_:selectedrange:replacementrange:)","title":"func setMarkedText(Any, selectedRange: NSRange, replacementRange: NSRange)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/unmarktext()","title":"func unmarkText()","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/validattributesformarkedtext()","title":"func validAttributesForMarkedText() -> [NSAttributedString.Key]","type":"method"}],"path":"\/documentation\/codeedittextview\/textview\/nstextinputclient-implementations","title":"NSTextInputClient Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textview\/visiblerect","title":"var visibleRect: NSRect","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textview\/layoutmanagerheightdidupdate(newheight:)","title":"func layoutManagerHeightDidUpdate(newHeight: CGFloat)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/layoutmanagermaxwidthdidchange(newwidth:)","title":"func layoutManagerMaxWidthDidChange(newWidth: CGFloat)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/layoutmanagertypingattributes()","title":"func layoutManagerTypingAttributes() -> [NSAttributedString.Key : Any]","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/layoutmanageryadjustment(_:)","title":"func layoutManagerYAdjustment(CGFloat)","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/textviewportsize()","title":"func textViewportSize() -> CGSize","type":"method"}],"path":"\/documentation\/codeedittextview\/textview\/textlayoutmanagerdelegate-implementations","title":"TextLayoutManagerDelegate Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textview\/visibletextrange","title":"var visibleTextRange: NSRange?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textview\/estimatedlineheight()","title":"func estimatedLineHeight() -> CGFloat","type":"method"},{"path":"\/documentation\/codeedittextview\/textview\/setneedsdisplay()","title":"func setNeedsDisplay()","type":"method"}],"path":"\/documentation\/codeedittextview\/textview\/textselectionmanagerdelegate-implementations","title":"TextSelectionManagerDelegate Implementations","type":"symbol"}],"path":"\/documentation\/codeedittextview\/textview","title":"TextView","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/ceundomanager\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/ceundomanager\/canredo","title":"var canRedo: Bool","type":"property"},{"path":"\/documentation\/codeedittextview\/ceundomanager\/canundo","title":"var canUndo: Bool","type":"property"},{"path":"\/documentation\/codeedittextview\/ceundomanager\/isgrouping","title":"var isGrouping: Bool","type":"property"},{"path":"\/documentation\/codeedittextview\/ceundomanager\/isredoing","title":"var isRedoing: Bool","type":"property"},{"path":"\/documentation\/codeedittextview\/ceundomanager\/isundoing","title":"var isUndoing: Bool","type":"property"},{"path":"\/documentation\/codeedittextview\/ceundomanager\/redocount","title":"var redoCount: Int","type":"property"},{"path":"\/documentation\/codeedittextview\/ceundomanager\/undocount","title":"var undoCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/ceundomanager\/beginundogrouping()","title":"func beginUndoGrouping()","type":"method"},{"path":"\/documentation\/codeedittextview\/ceundomanager\/clearstack()","title":"func clearStack()","type":"method"},{"path":"\/documentation\/codeedittextview\/ceundomanager\/disable()","title":"func disable()","type":"method"},{"path":"\/documentation\/codeedittextview\/ceundomanager\/enable()","title":"func enable()","type":"method"},{"path":"\/documentation\/codeedittextview\/ceundomanager\/endundogrouping()","title":"func endUndoGrouping()","type":"method"},{"path":"\/documentation\/codeedittextview\/ceundomanager\/redo()","title":"func redo()","type":"method"},{"path":"\/documentation\/codeedittextview\/ceundomanager\/registermutation(_:)","title":"func registerMutation(TextMutation)","type":"method"},{"path":"\/documentation\/codeedittextview\/ceundomanager\/registerundo(withtarget:selector:object:)","title":"func registerUndo(withTarget: Any, selector: Selector, object: Any?)","type":"method"},{"path":"\/documentation\/codeedittextview\/ceundomanager\/undo()","title":"func undo()","type":"method"}],"path":"\/documentation\/codeedittextview\/ceundomanager","title":"CEUndoManager","type":"class"},{"title":"Text Layout","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/rangeiterator\/next()","title":"func next() -> TextLineStorage<TextLine>.TextLinePosition?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/rangeiterator\/elements","title":"var elements: Self","type":"property"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/rangeiterator\/lazy","title":"var lazy: Self.Elements","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/rangeiterator\/compactmap(_:)-5x9rx","title":"func compactMap<ElementOfResult>((Self.Elements.Element) -> ElementOfResult?) -> LazyMapSequence<LazyFilterSequence<LazyMapSequence<Self.Elements, ElementOfResult?>>, ElementOfResult>","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/rangeiterator\/drop(while:)","title":"func drop(while: (Self.Elements.Element) -> Bool) -> LazyDropWhileSequence<Self.Elements>","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/rangeiterator\/filter(_:)","title":"func filter((Self.Elements.Element) -> Bool) -> LazyFilterSequence<Self.Elements>","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/rangeiterator\/flatmap(_:)-28gsc","title":"func flatMap<SegmentOfResult>((Self.Elements.Element) -> SegmentOfResult) -> LazySequence<FlattenSequence<LazyMapSequence<Self.Elements, SegmentOfResult>>>","type":"method"},{"deprecated":true,"path":"\/documentation\/codeedittextview\/textlayoutmanager\/rangeiterator\/flatmap(_:)-5tpzt","title":"func flatMap<ElementOfResult>((Self.Elements.Element) -> ElementOfResult?) -> LazyMapSequence<LazyFilterSequence<LazyMapSequence<Self.Elements, ElementOfResult?>>, ElementOfResult>","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/rangeiterator\/map(_:)-6xfr2","title":"func map<U>((Self.Element) -> U) -> LazyMapSequence<Self.Elements, U>","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/rangeiterator\/prefix(while:)","title":"func prefix(while: (Self.Elements.Element) -> Bool) -> LazyPrefixWhileSequence<Self.Elements>","type":"method"}],"path":"\/documentation\/codeedittextview\/textlayoutmanager\/rangeiterator\/lazysequenceprotocol-implementations","title":"LazySequenceProtocol Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/rangeiterator\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/rangeiterator\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/rangeiterator\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/rangeiterator\/compactmap(_:)-5uuh9","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/rangeiterator\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/rangeiterator\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/rangeiterator\/count(where:)","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/rangeiterator\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/rangeiterator\/droplast(_:)","title":"func dropLast(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/rangeiterator\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/rangeiterator\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/rangeiterator\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/rangeiterator\/flatmap(_:)-3fyy7","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"deprecated":true,"path":"\/documentation\/codeedittextview\/textlayoutmanager\/rangeiterator\/flatmap(_:)-73i4d","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/rangeiterator\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/rangeiterator\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/rangeiterator\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/rangeiterator\/makeiterator()","title":"func makeIterator() -> Self","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/rangeiterator\/map(_:)-5l7nx","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/rangeiterator\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/rangeiterator\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/rangeiterator\/prefix(_:)","title":"func prefix(Int) -> PrefixSequence<Self>","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/rangeiterator\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/rangeiterator\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/rangeiterator\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/rangeiterator\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/rangeiterator\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/rangeiterator\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/rangeiterator\/sorted(using:)-4zta4","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/rangeiterator\/sorted(using:)-8vhlv","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/rangeiterator\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/rangeiterator\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/rangeiterator\/suffix(_:)","title":"func suffix(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/rangeiterator\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"}],"path":"\/documentation\/codeedittextview\/textlayoutmanager\/rangeiterator\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/codeedittextview\/textlayoutmanager\/rangeiterator","title":"TextLayoutManager.RangeIterator","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/ypositioniterator\/next()","title":"func next() -> TextLineStorage<TextLine>.TextLinePosition?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/ypositioniterator\/elements","title":"var elements: Self","type":"property"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/ypositioniterator\/lazy","title":"var lazy: Self.Elements","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/ypositioniterator\/compactmap(_:)-5wc6b","title":"func compactMap<ElementOfResult>((Self.Elements.Element) -> ElementOfResult?) -> LazyMapSequence<LazyFilterSequence<LazyMapSequence<Self.Elements, ElementOfResult?>>, ElementOfResult>","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/ypositioniterator\/drop(while:)","title":"func drop(while: (Self.Elements.Element) -> Bool) -> LazyDropWhileSequence<Self.Elements>","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/ypositioniterator\/filter(_:)","title":"func filter((Self.Elements.Element) -> Bool) -> LazyFilterSequence<Self.Elements>","type":"method"},{"deprecated":true,"path":"\/documentation\/codeedittextview\/textlayoutmanager\/ypositioniterator\/flatmap(_:)-65ga0","title":"func flatMap<ElementOfResult>((Self.Elements.Element) -> ElementOfResult?) -> LazyMapSequence<LazyFilterSequence<LazyMapSequence<Self.Elements, ElementOfResult?>>, ElementOfResult>","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/ypositioniterator\/flatmap(_:)-8c3o2","title":"func flatMap<SegmentOfResult>((Self.Elements.Element) -> SegmentOfResult) -> LazySequence<FlattenSequence<LazyMapSequence<Self.Elements, SegmentOfResult>>>","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/ypositioniterator\/map(_:)-3fj1z","title":"func map<U>((Self.Element) -> U) -> LazyMapSequence<Self.Elements, U>","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/ypositioniterator\/prefix(while:)","title":"func prefix(while: (Self.Elements.Element) -> Bool) -> LazyPrefixWhileSequence<Self.Elements>","type":"method"}],"path":"\/documentation\/codeedittextview\/textlayoutmanager\/ypositioniterator\/lazysequenceprotocol-implementations","title":"LazySequenceProtocol Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/ypositioniterator\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/ypositioniterator\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/ypositioniterator\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/ypositioniterator\/compactmap(_:)-xtl4","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/ypositioniterator\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/ypositioniterator\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/ypositioniterator\/count(where:)","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/ypositioniterator\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/ypositioniterator\/droplast(_:)","title":"func dropLast(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/ypositioniterator\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/ypositioniterator\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/ypositioniterator\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/ypositioniterator\/flatmap(_:)-8cio9","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"deprecated":true,"path":"\/documentation\/codeedittextview\/textlayoutmanager\/ypositioniterator\/flatmap(_:)-fcq1","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/ypositioniterator\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/ypositioniterator\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/ypositioniterator\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/ypositioniterator\/makeiterator()","title":"func makeIterator() -> Self","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/ypositioniterator\/map(_:)-4hd6e","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/ypositioniterator\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/ypositioniterator\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/ypositioniterator\/prefix(_:)","title":"func prefix(Int) -> PrefixSequence<Self>","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/ypositioniterator\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/ypositioniterator\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/ypositioniterator\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/ypositioniterator\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/ypositioniterator\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/ypositioniterator\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/ypositioniterator\/sorted(using:)-44git","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/ypositioniterator\/sorted(using:)-9j2ea","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/ypositioniterator\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/ypositioniterator\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/ypositioniterator\/suffix(_:)","title":"func suffix(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/ypositioniterator\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"}],"path":"\/documentation\/codeedittextview\/textlayoutmanager\/ypositioniterator\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/codeedittextview\/textlayoutmanager\/ypositioniterator","title":"TextLayoutManager.YPositionIterator","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/init(textstorage:lineheightmultiplier:wraplines:textview:delegate:renderdelegate:invisiblecharacterdelegate:)","title":"init(textStorage: NSTextStorage, lineHeightMultiplier: CGFloat, wrapLines: Bool, textView: NSView, delegate: TextLayoutManagerDelegate?, renderDelegate: TextLayoutManagerRenderDelegate?, invisibleCharacterDelegate: InvisibleCharactersDelegate?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/attachments","title":"let attachments: TextAttachmentManager","type":"property"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/delegate","title":"var delegate: TextLayoutManagerDelegate?","type":"property"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/detectedlineending","title":"var detectedLineEnding: LineEnding","type":"property"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/edgeinsets","title":"var edgeInsets: HorizontalEdgeInsets","type":"property"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/invisiblecharacterdelegate","title":"var invisibleCharacterDelegate: InvisibleCharactersDelegate?","type":"property"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/isintransaction","title":"var isInTransaction: Bool","type":"property"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/linebreakstrategy","title":"var lineBreakStrategy: LineBreakStrategy","type":"property"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/linecount","title":"var lineCount: Int","type":"property"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/lineheightmultiplier","title":"var lineHeightMultiplier: CGFloat","type":"property"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/linestorage","title":"var lineStorage: TextLineStorage<TextLine>","type":"property"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/maxlinelayoutwidth","title":"var maxLineLayoutWidth: CGFloat","type":"property"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/renderdelegate","title":"var renderDelegate: TextLayoutManagerRenderDelegate?","type":"property"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/verticallayoutpadding","title":"var verticalLayoutPadding: CGFloat","type":"property"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/wraplines","title":"var wrapLines: Bool","type":"property"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/wraplineswidth","title":"var wrapLinesWidth: CGFloat","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/characterrect(in:for:)","title":"func characterRect(in: LineFragment, for: NSRange) -> CGRect","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/characterxposition(in:for:)","title":"func characterXPosition(in: LineFragment, for: Int) -> CGFloat","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/determinevisibleposition(for:)","title":"func determineVisiblePosition(for: TextLineStorage<TextLine>.TextLinePosition?) -> (position: TextLineStorage<TextLine>.TextLinePosition, indexRange: ClosedRange<Int>)?","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/estimatelineheight()","title":"func estimateLineHeight() -> CGFloat","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/estimatedheight()","title":"func estimatedHeight() -> CGFloat","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/estimatedwidth()","title":"func estimatedWidth() -> CGFloat","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/invalidatelayoutforrange(_:)","title":"func invalidateLayoutForRange(NSRange)","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/invalidatelayoutforrect(_:)","title":"func invalidateLayoutForRect(NSRect)","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/layoutlines(in:)","title":"func layoutLines(in: NSRect?) -> Set<TextLine.ID>","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/linesinrange(_:)","title":"func linesInRange(NSRange) -> RangeIterator","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/linesstartingat(_:until:)","title":"func linesStartingAt(CGFloat, until: CGFloat) -> YPositionIterator","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/rectforoffset(_:)","title":"func rectForOffset(Int) -> CGRect?","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/rectsfor(range:)","title":"func rectsFor(range: NSRange) -> [CGRect]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/roundedpathforrange(_:cornerradius:)","title":"func roundedPathForRange(NSRange, cornerRadius: CGFloat) -> NSBezierPath?","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/setneedslayout()","title":"func setNeedsLayout()","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/textlineforindex(_:)","title":"func textLineForIndex(Int) -> TextLineStorage<TextLine>.TextLinePosition?","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/textlineforoffset(_:)","title":"func textLineForOffset(Int) -> TextLineStorage<TextLine>.TextLinePosition?","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/textlineforposition(_:)","title":"func textLineForPosition(CGFloat) -> TextLineStorage<TextLine>.TextLinePosition?","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/textoffsetatpoint(_:)","title":"func textOffsetAtPoint(CGPoint) -> Int?","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/visiblelines()","title":"func visibleLines() -> YPositionIterator","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textlayoutmanager\/textstorage(_:didprocessediting:range:changeinlength:)","title":"func textStorage(NSTextStorage, didProcessEditing: NSTextStorageEditActions, range: NSRange, changeInLength: Int)","type":"method"}],"path":"\/documentation\/codeedittextview\/textlayoutmanager\/nstextstoragedelegate-implementations","title":"NSTextStorageDelegate Implementations","type":"symbol"}],"path":"\/documentation\/codeedittextview\/textlayoutmanager","title":"TextLayoutManager","type":"class"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textline\/displaydata\/init(maxwidth:lineheightmultiplier:estimatedlineheight:breakstrategy:)","title":"init(maxWidth: CGFloat, lineHeightMultiplier: CGFloat, estimatedLineHeight: CGFloat, breakStrategy: LineBreakStrategy)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textline\/displaydata\/breakstrategy","title":"let breakStrategy: LineBreakStrategy","type":"property"},{"path":"\/documentation\/codeedittextview\/textline\/displaydata\/estimatedlineheight","title":"let estimatedLineHeight: CGFloat","type":"property"},{"path":"\/documentation\/codeedittextview\/textline\/displaydata\/lineheightmultiplier","title":"let lineHeightMultiplier: CGFloat","type":"property"},{"path":"\/documentation\/codeedittextview\/textline\/displaydata\/maxwidth","title":"let maxWidth: CGFloat","type":"property"}],"path":"\/documentation\/codeedittextview\/textline\/displaydata","title":"TextLine.DisplayData","type":"struct"},{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textline\/==(_:_:)","title":"static func == (TextLine, TextLine) -> Bool","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textline\/id","title":"let id: UUID","type":"property"},{"path":"\/documentation\/codeedittextview\/textline\/linefragments","title":"var lineFragments: TextLineStorage<LineFragment>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textline\/preparefordisplay(displaydata:range:stringref:markedranges:attachments:)","title":"func prepareForDisplay(displayData: DisplayData, range: NSRange, stringRef: NSTextStorage, markedRanges: MarkedRanges?, attachments: [AnyTextAttachment])","type":"method"},{"path":"\/documentation\/codeedittextview\/textline\/setneedslayout()","title":"func setNeedsLayout()","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textline\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/codeedittextview\/textline\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/codeedittextview\/textline","title":"TextLine","type":"class"},{"children":[{"title":"Structures","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/linefragment\/contentposition","title":"LineFragment.ContentPosition","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/linefragment\/fragmentcontent\/data","title":"let data: Content","type":"property"},{"path":"\/documentation\/codeedittextview\/linefragment\/fragmentcontent\/length","title":"var length: Int","type":"property"},{"path":"\/documentation\/codeedittextview\/linefragment\/fragmentcontent\/width","title":"let width: CGFloat","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/linefragment\/fragmentcontent\/content\/attachment(attachment:)","title":"case attachment(attachment: AnyTextAttachment)","type":"case"},{"path":"\/documentation\/codeedittextview\/linefragment\/fragmentcontent\/content\/text(line:)","title":"case text(line: CTLine)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/linefragment\/fragmentcontent\/content\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/codeedittextview\/linefragment\/fragmentcontent\/content\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/codeedittextview\/linefragment\/fragmentcontent\/content","title":"LineFragment.FragmentContent.Content","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/linefragment\/fragmentcontent\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/codeedittextview\/linefragment\/fragmentcontent\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/codeedittextview\/linefragment\/fragmentcontent","title":"LineFragment.FragmentContent","type":"struct"},{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/linefragment\/==(_:_:)","title":"static func == (LineFragment, LineFragment) -> Bool","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/linefragment\/contents","title":"var contents: [FragmentContent]","type":"property"},{"path":"\/documentation\/codeedittextview\/linefragment\/descent","title":"var descent: CGFloat","type":"property"},{"path":"\/documentation\/codeedittextview\/linefragment\/documentrange","title":"var documentRange: NSRange","type":"property"},{"path":"\/documentation\/codeedittextview\/linefragment\/height","title":"var height: CGFloat","type":"property"},{"path":"\/documentation\/codeedittextview\/linefragment\/heightdifference","title":"var heightDifference: CGFloat","type":"property"},{"path":"\/documentation\/codeedittextview\/linefragment\/id","title":"let id: UUID","type":"property"},{"path":"\/documentation\/codeedittextview\/linefragment\/scaledheight","title":"var scaledHeight: CGFloat","type":"property"},{"path":"\/documentation\/codeedittextview\/linefragment\/width","title":"var width: CGFloat","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/linefragment\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/codeedittextview\/linefragment\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/codeedittextview\/linefragment","title":"LineFragment","type":"class"},{"title":"Text Selection","type":"groupMarker"},{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textselectionmanager\/textselection\/==(_:_:)","title":"static func == (TextSelection, TextSelection) -> Bool","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textselectionmanager\/textselection\/range","title":"var range: NSRange","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textselectionmanager\/textselection\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textselectionmanager\/textselection\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/codeedittextview\/textselectionmanager\/textselection\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/codeedittextview\/textselectionmanager\/textselection","title":"TextSelectionManager.TextSelection","type":"class"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textselectionmanager\/init(layoutmanager:textstorage:textview:delegate:usesystemcursor:)","title":"init(layoutManager: TextLayoutManager, textStorage: NSTextStorage, textView: TextView?, delegate: TextSelectionManagerDelegate?, useSystemCursor: Bool)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textselectionmanager\/edgeinsets","title":"var edgeInsets: HorizontalEdgeInsets","type":"property"},{"path":"\/documentation\/codeedittextview\/textselectionmanager\/highlightselectedline","title":"var highlightSelectedLine: Bool","type":"property"},{"path":"\/documentation\/codeedittextview\/textselectionmanager\/insertionpointcolor","title":"var insertionPointColor: NSColor","type":"property"},{"path":"\/documentation\/codeedittextview\/textselectionmanager\/selectedlinebackgroundcolor","title":"var selectedLineBackgroundColor: NSColor","type":"property"},{"path":"\/documentation\/codeedittextview\/textselectionmanager\/selectionbackgroundcolor","title":"var selectionBackgroundColor: NSColor","type":"property"},{"path":"\/documentation\/codeedittextview\/textselectionmanager\/textselections","title":"var textSelections: [TextSelection]","type":"property"},{"path":"\/documentation\/codeedittextview\/textselectionmanager\/usesystemcursor","title":"var useSystemCursor: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textselectionmanager\/addselectedrange(_:)","title":"func addSelectedRange(NSRange)","type":"method"},{"path":"\/documentation\/codeedittextview\/textselectionmanager\/didreplacecharacters(in:replacementlength:)","title":"func didReplaceCharacters(in: NSRange, replacementLength: Int)","type":"method"},{"path":"\/documentation\/codeedittextview\/textselectionmanager\/drawselections(in:)","title":"func drawSelections(in: NSRect)","type":"method"},{"path":"\/documentation\/codeedittextview\/textselectionmanager\/moveselections(direction:destination:modifyselection:)","title":"func moveSelections(direction: TextSelectionManager.Direction, destination: TextSelectionManager.Destination, modifySelection: Bool)","type":"method"},{"path":"\/documentation\/codeedittextview\/textselectionmanager\/notifyafteredit(force:)","title":"func notifyAfterEdit(force: Bool)","type":"method"},{"path":"\/documentation\/codeedittextview\/textselectionmanager\/rangeofselection(from:direction:destination:decomposecharacters:suggestedxpos:)","title":"func rangeOfSelection(from: Int, direction: Direction, destination: Destination, decomposeCharacters: Bool, suggestedXPos: CGFloat?) -> NSRange","type":"method"},{"path":"\/documentation\/codeedittextview\/textselectionmanager\/setselectedrange(_:)","title":"func setSelectedRange(NSRange)","type":"method"},{"path":"\/documentation\/codeedittextview\/textselectionmanager\/setselectedranges(_:)","title":"func setSelectedRanges([NSRange])","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textselectionmanager\/selectionchangednotification","title":"static let selectionChangedNotification: Notification.Name","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textselectionmanager\/destination\/character","title":"case character","type":"case"},{"path":"\/documentation\/codeedittextview\/textselectionmanager\/destination\/document","title":"case document","type":"case"},{"path":"\/documentation\/codeedittextview\/textselectionmanager\/destination\/line","title":"case line","type":"case"},{"path":"\/documentation\/codeedittextview\/textselectionmanager\/destination\/page","title":"case page","type":"case"},{"path":"\/documentation\/codeedittextview\/textselectionmanager\/destination\/visualline","title":"case visualLine","type":"case"},{"path":"\/documentation\/codeedittextview\/textselectionmanager\/destination\/word","title":"case word","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textselectionmanager\/destination\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/codeedittextview\/textselectionmanager\/destination\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/codeedittextview\/textselectionmanager\/destination","title":"TextSelectionManager.Destination","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textselectionmanager\/direction\/backward","title":"case backward","type":"case"},{"path":"\/documentation\/codeedittextview\/textselectionmanager\/direction\/down","title":"case down","type":"case"},{"path":"\/documentation\/codeedittextview\/textselectionmanager\/direction\/forward","title":"case forward","type":"case"},{"path":"\/documentation\/codeedittextview\/textselectionmanager\/direction\/up","title":"case up","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textselectionmanager\/direction\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/codeedittextview\/textselectionmanager\/direction\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/codeedittextview\/textselectionmanager\/direction","title":"TextSelectionManager.Direction","type":"enum"}],"path":"\/documentation\/codeedittextview\/textselectionmanager","title":"TextSelectionManager","type":"class"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textselectionmanager\/textselection\/==(_:_:)","title":"static func == (TextSelection, TextSelection) -> Bool","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textselectionmanager\/textselection\/range","title":"var range: NSRange","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textselectionmanager\/textselection\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textselectionmanager\/textselection\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/codeedittextview\/textselectionmanager\/textselection\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/codeedittextview\/textselectionmanager\/textselection","title":"TextSelectionManager.TextSelection","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/cursorview\/init(coder:)","title":"init?(coder: NSCoder)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/cursorview\/color","title":"var color: NSColor","type":"property"},{"path":"\/documentation\/codeedittextview\/cursorview\/isflipped","title":"var isFlipped: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/cursorview\/hittest(_:)","title":"func hitTest(NSPoint) -> NSView?","type":"method"}],"path":"\/documentation\/codeedittextview\/cursorview","title":"CursorView","type":"class"},{"title":"Supporting Types","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/builditem\/data","title":"let data: Data","type":"property"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/builditem\/height","title":"let height: CGFloat?","type":"property"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/builditem\/length","title":"let length: Int","type":"property"}],"path":"\/documentation\/codeedittextview\/textlinestorage\/builditem","title":"TextLineStorage.BuildItem","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlineposition\/data","title":"let data: Data","type":"property"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlineposition\/height","title":"let height: CGFloat","type":"property"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlineposition\/index","title":"let index: Int","type":"property"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlineposition\/range","title":"let range: NSRange","type":"property"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlineposition\/ypos","title":"let yPos: CGFloat","type":"property"}],"path":"\/documentation\/codeedittextview\/textlinestorage\/textlineposition","title":"TextLineStorage.TextLinePosition","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestorageiterator\/next()","title":"func next() -> TextLinePosition?","type":"method"}],"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestorageiterator","title":"TextLineStorage.TextLineStorageIterator","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestoragerangeiterator\/next()","title":"func next() -> TextLinePosition?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestoragerangeiterator\/elements","title":"var elements: Self","type":"property"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestoragerangeiterator\/lazy","title":"var lazy: Self.Elements","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestoragerangeiterator\/compactmap(_:)-75bna","title":"func compactMap<ElementOfResult>((Self.Elements.Element) -> ElementOfResult?) -> LazyMapSequence<LazyFilterSequence<LazyMapSequence<Self.Elements, ElementOfResult?>>, ElementOfResult>","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestoragerangeiterator\/drop(while:)","title":"func drop(while: (Self.Elements.Element) -> Bool) -> LazyDropWhileSequence<Self.Elements>","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestoragerangeiterator\/filter(_:)","title":"func filter((Self.Elements.Element) -> Bool) -> LazyFilterSequence<Self.Elements>","type":"method"},{"deprecated":true,"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestoragerangeiterator\/flatmap(_:)-3w8yl","title":"func flatMap<ElementOfResult>((Self.Elements.Element) -> ElementOfResult?) -> LazyMapSequence<LazyFilterSequence<LazyMapSequence<Self.Elements, ElementOfResult?>>, ElementOfResult>","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestoragerangeiterator\/flatmap(_:)-8j0nw","title":"func flatMap<SegmentOfResult>((Self.Elements.Element) -> SegmentOfResult) -> LazySequence<FlattenSequence<LazyMapSequence<Self.Elements, SegmentOfResult>>>","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestoragerangeiterator\/map(_:)-5h1kj","title":"func map<U>((Self.Element) -> U) -> LazyMapSequence<Self.Elements, U>","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestoragerangeiterator\/prefix(while:)","title":"func prefix(while: (Self.Elements.Element) -> Bool) -> LazyPrefixWhileSequence<Self.Elements>","type":"method"}],"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestoragerangeiterator\/lazysequenceprotocol-implementations","title":"LazySequenceProtocol Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestoragerangeiterator\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestoragerangeiterator\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestoragerangeiterator\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestoragerangeiterator\/compactmap(_:)-jq70","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestoragerangeiterator\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestoragerangeiterator\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestoragerangeiterator\/count(where:)","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestoragerangeiterator\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestoragerangeiterator\/droplast(_:)","title":"func dropLast(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestoragerangeiterator\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestoragerangeiterator\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestoragerangeiterator\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestoragerangeiterator\/flatmap(_:)-22h6s","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"deprecated":true,"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestoragerangeiterator\/flatmap(_:)-77eog","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestoragerangeiterator\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestoragerangeiterator\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestoragerangeiterator\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestoragerangeiterator\/makeiterator()","title":"func makeIterator() -> Self","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestoragerangeiterator\/map(_:)-2b7rq","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestoragerangeiterator\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestoragerangeiterator\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestoragerangeiterator\/prefix(_:)","title":"func prefix(Int) -> PrefixSequence<Self>","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestoragerangeiterator\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestoragerangeiterator\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestoragerangeiterator\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestoragerangeiterator\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestoragerangeiterator\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestoragerangeiterator\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestoragerangeiterator\/sorted(using:)-5pb9","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestoragerangeiterator\/sorted(using:)-73724","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestoragerangeiterator\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestoragerangeiterator\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestoragerangeiterator\/suffix(_:)","title":"func suffix(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestoragerangeiterator\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"}],"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestoragerangeiterator\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestoragerangeiterator","title":"TextLineStorage.TextLineStorageRangeIterator","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestorageyiterator\/next()","title":"func next() -> TextLinePosition?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestorageyiterator\/elements","title":"var elements: Self","type":"property"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestorageyiterator\/lazy","title":"var lazy: Self.Elements","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestorageyiterator\/compactmap(_:)-1cc9t","title":"func compactMap<ElementOfResult>((Self.Elements.Element) -> ElementOfResult?) -> LazyMapSequence<LazyFilterSequence<LazyMapSequence<Self.Elements, ElementOfResult?>>, ElementOfResult>","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestorageyiterator\/drop(while:)","title":"func drop(while: (Self.Elements.Element) -> Bool) -> LazyDropWhileSequence<Self.Elements>","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestorageyiterator\/filter(_:)","title":"func filter((Self.Elements.Element) -> Bool) -> LazyFilterSequence<Self.Elements>","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestorageyiterator\/flatmap(_:)-8ow0q","title":"func flatMap<SegmentOfResult>((Self.Elements.Element) -> SegmentOfResult) -> LazySequence<FlattenSequence<LazyMapSequence<Self.Elements, SegmentOfResult>>>","type":"method"},{"deprecated":true,"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestorageyiterator\/flatmap(_:)-dsr9","title":"func flatMap<ElementOfResult>((Self.Elements.Element) -> ElementOfResult?) -> LazyMapSequence<LazyFilterSequence<LazyMapSequence<Self.Elements, ElementOfResult?>>, ElementOfResult>","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestorageyiterator\/map(_:)-131bq","title":"func map<U>((Self.Element) -> U) -> LazyMapSequence<Self.Elements, U>","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestorageyiterator\/prefix(while:)","title":"func prefix(while: (Self.Elements.Element) -> Bool) -> LazyPrefixWhileSequence<Self.Elements>","type":"method"}],"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestorageyiterator\/lazysequenceprotocol-implementations","title":"LazySequenceProtocol Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestorageyiterator\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestorageyiterator\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestorageyiterator\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestorageyiterator\/compactmap(_:)-9fi1l","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestorageyiterator\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestorageyiterator\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestorageyiterator\/count(where:)","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestorageyiterator\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestorageyiterator\/droplast(_:)","title":"func dropLast(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestorageyiterator\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestorageyiterator\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestorageyiterator\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestorageyiterator\/flatmap(_:)-1iizf","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"deprecated":true,"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestorageyiterator\/flatmap(_:)-3buba","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestorageyiterator\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestorageyiterator\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestorageyiterator\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestorageyiterator\/makeiterator()","title":"func makeIterator() -> Self","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestorageyiterator\/map(_:)-1ioz9","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestorageyiterator\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestorageyiterator\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestorageyiterator\/prefix(_:)","title":"func prefix(Int) -> PrefixSequence<Self>","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestorageyiterator\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestorageyiterator\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestorageyiterator\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestorageyiterator\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestorageyiterator\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestorageyiterator\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestorageyiterator\/sorted(using:)-4zxqp","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestorageyiterator\/sorted(using:)-rito","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestorageyiterator\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestorageyiterator\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestorageyiterator\/suffix(_:)","title":"func suffix(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestorageyiterator\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"}],"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestorageyiterator\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/codeedittextview\/textlinestorage\/textlinestorageyiterator","title":"TextLineStorage.TextLineStorageYIterator","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/count","title":"var count: Int","type":"property"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/first","title":"var first: TextLinePosition?","type":"property"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/height","title":"var height: CGFloat","type":"property"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/last","title":"var last: TextLinePosition?","type":"property"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/length","title":"var length: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/build(from:estimatedlineheight:)","title":"func build(from: borrowing [BuildItem], estimatedLineHeight: CGFloat)","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/delete(lineat:)","title":"func delete(lineAt: Int)","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/getline(atindex:)","title":"func getLine(atIndex: Int) -> TextLinePosition?","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/getline(atoffset:)","title":"func getLine(atOffset: Int) -> TextLinePosition?","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/getline(atposition:)","title":"func getLine(atPosition: CGFloat) -> TextLinePosition?","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/insert(line:atoffset:length:height:)","title":"func insert(line: Data, atOffset: Int, length: Int, height: CGFloat)","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/linesinrange(_:)","title":"func linesInRange(NSRange) -> TextLineStorageRangeIterator","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/linesstartingat(_:until:)","title":"func linesStartingAt(CGFloat, until: CGFloat) -> TextLineStorageYIterator","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/removeall()","title":"func removeAll()","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/update(atoffset:delta:deltaheight:)","title":"func update(atOffset: Int, delta: Int, deltaHeight: CGFloat)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/elements","title":"var elements: Self","type":"property"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/lazy","title":"var lazy: Self.Elements","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/compactmap(_:)-88mrr","title":"func compactMap<ElementOfResult>((Self.Elements.Element) -> ElementOfResult?) -> LazyMapSequence<LazyFilterSequence<LazyMapSequence<Self.Elements, ElementOfResult?>>, ElementOfResult>","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/drop(while:)","title":"func drop(while: (Self.Elements.Element) -> Bool) -> LazyDropWhileSequence<Self.Elements>","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/filter(_:)","title":"func filter((Self.Elements.Element) -> Bool) -> LazyFilterSequence<Self.Elements>","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/flatmap(_:)-2z47t","title":"func flatMap<SegmentOfResult>((Self.Elements.Element) -> SegmentOfResult) -> LazySequence<FlattenSequence<LazyMapSequence<Self.Elements, SegmentOfResult>>>","type":"method"},{"deprecated":true,"path":"\/documentation\/codeedittextview\/textlinestorage\/flatmap(_:)-6b63g","title":"func flatMap<ElementOfResult>((Self.Elements.Element) -> ElementOfResult?) -> LazyMapSequence<LazyFilterSequence<LazyMapSequence<Self.Elements, ElementOfResult?>>, ElementOfResult>","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/map(_:)-zff","title":"func map<U>((Self.Element) -> U) -> LazyMapSequence<Self.Elements, U>","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/prefix(while:)","title":"func prefix(while: (Self.Elements.Element) -> Bool) -> LazyPrefixWhileSequence<Self.Elements>","type":"method"}],"path":"\/documentation\/codeedittextview\/textlinestorage\/lazysequenceprotocol-implementations","title":"LazySequenceProtocol Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/compactmap(_:)-1khzu","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/count(where:)","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/droplast(_:)","title":"func dropLast(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"deprecated":true,"path":"\/documentation\/codeedittextview\/textlinestorage\/flatmap(_:)-4p606","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/flatmap(_:)-56br0","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/makeiterator()","title":"func makeIterator() -> TextLineStorageIterator","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/map(_:)-2e7y1","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/prefix(_:)","title":"func prefix(Int) -> PrefixSequence<Self>","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/sorted(using:)-4776o","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/sorted(using:)-70px","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/suffix(_:)","title":"func suffix(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlinestorage\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"}],"path":"\/documentation\/codeedittextview\/textlinestorage\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/codeedittextview\/textlinestorage","title":"TextLineStorage","type":"class"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/horizontaledgeinsets\/+(_:_:)","title":"static func + (HorizontalEdgeInsets, HorizontalEdgeInsets) -> HorizontalEdgeInsets","type":"op"},{"path":"\/documentation\/codeedittextview\/horizontaledgeinsets\/-(_:_:)","title":"static func - (HorizontalEdgeInsets, HorizontalEdgeInsets) -> HorizontalEdgeInsets","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/horizontaledgeinsets\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/codeedittextview\/horizontaledgeinsets\/init(left:right:)","title":"init(left: CGFloat, right: CGFloat)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/horizontaledgeinsets\/horizontal","title":"var horizontal: CGFloat","type":"property"},{"path":"\/documentation\/codeedittextview\/horizontaledgeinsets\/left","title":"var left: CGFloat","type":"property"},{"path":"\/documentation\/codeedittextview\/horizontaledgeinsets\/right","title":"var right: CGFloat","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/horizontaledgeinsets\/zero","title":"static let zero: HorizontalEdgeInsets","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/horizontaledgeinsets\/+(_:)","title":"static func + (Self) -> Self","type":"op"},{"path":"\/documentation\/codeedittextview\/horizontaledgeinsets\/+=(_:_:)","title":"static func += (inout Self, Self)","type":"op"},{"path":"\/documentation\/codeedittextview\/horizontaledgeinsets\/-=(_:_:)","title":"static func -= (inout Self, Self)","type":"op"}],"path":"\/documentation\/codeedittextview\/horizontaledgeinsets\/additivearithmetic-implementations","title":"AdditiveArithmetic Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/horizontaledgeinsets\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/codeedittextview\/horizontaledgeinsets\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/codeedittextview\/horizontaledgeinsets","title":"HorizontalEdgeInsets","type":"struct"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/lineending\/carriagereturn","title":"case carriageReturn","type":"case"},{"path":"\/documentation\/codeedittextview\/lineending\/carriagereturnlinefeed","title":"case carriageReturnLineFeed","type":"case"},{"path":"\/documentation\/codeedittextview\/lineending\/linefeed","title":"case lineFeed","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/lineending\/init(line:)","title":"init?(line: String)","type":"init"},{"path":"\/documentation\/codeedittextview\/lineending\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/lineending\/length","title":"var length: Int","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/lineending\/detectlineending(linestorage:textstorage:)","title":"static func detectLineEnding(lineStorage: TextLineStorage<TextLine>, textStorage: NSTextStorage) -> LineEnding","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/lineending\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/codeedittextview\/lineending\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/lineending\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/lineending\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/codeedittextview\/lineending\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/codeedittextview\/lineending","title":"LineEnding","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/linebreakstrategy\/character","title":"case character","type":"case"},{"path":"\/documentation\/codeedittextview\/linebreakstrategy\/word","title":"case word","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/linebreakstrategy\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/codeedittextview\/linebreakstrategy\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/codeedittextview\/linebreakstrategy","title":"LineBreakStrategy","type":"enum"},{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/emphasismanager\/addemphases(_:for:)","title":"func addEmphases([Emphasis], for: String)","type":"method"},{"path":"\/documentation\/codeedittextview\/emphasismanager\/addemphasis(_:for:)","title":"func addEmphasis(Emphasis, for: String)","type":"method"},{"path":"\/documentation\/codeedittextview\/emphasismanager\/getemphases(for:)","title":"func getEmphases(for: String) -> [Emphasis]","type":"method"},{"path":"\/documentation\/codeedittextview\/emphasismanager\/removeallemphases()","title":"func removeAllEmphases()","type":"method"},{"path":"\/documentation\/codeedittextview\/emphasismanager\/removeemphases(for:)","title":"func removeEmphases(for: String)","type":"method"},{"path":"\/documentation\/codeedittextview\/emphasismanager\/replaceemphases(_:for:)","title":"func replaceEmphases([Emphasis], for: String)","type":"method"},{"path":"\/documentation\/codeedittextview\/emphasismanager\/updateemphases(for:_:)","title":"func updateEmphases(for: String, ([Emphasis]) -> [Emphasis])","type":"method"},{"path":"\/documentation\/codeedittextview\/emphasismanager\/updatelayerbackgrounds()","title":"func updateLayerBackgrounds()","type":"method"}],"path":"\/documentation\/codeedittextview\/emphasismanager","title":"EmphasisManager","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/linefragmentrenderer\/init(textstorage:invisiblecharacterdelegate:)","title":"init(textStorage: NSTextStorage?, invisibleCharacterDelegate: InvisibleCharactersDelegate?)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/linefragmentrenderer\/draw(linefragment:in:ypos:)","title":"func draw(lineFragment: LineFragment, in: CGContext, yPos: CGFloat)","type":"method"}],"path":"\/documentation\/codeedittextview\/linefragmentrenderer","title":"LineFragmentRenderer","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/linefragmentview\/init(coder:)","title":"init?(coder: NSCoder)","type":"init"},{"path":"\/documentation\/codeedittextview\/linefragmentview\/init(frame:)","title":"init(frame: NSRect)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/linefragmentview\/isflipped","title":"var isFlipped: Bool","type":"property"},{"path":"\/documentation\/codeedittextview\/linefragmentview\/isopaque","title":"var isOpaque: Bool","type":"property"},{"path":"\/documentation\/codeedittextview\/linefragmentview\/linefragment","title":"var lineFragment: LineFragment?","type":"property"},{"path":"\/documentation\/codeedittextview\/linefragmentview\/renderer","title":"var renderer: LineFragmentRenderer?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/linefragmentview\/draw(_:)","title":"func draw(NSRect)","type":"method"},{"path":"\/documentation\/codeedittextview\/linefragmentview\/hittest(_:)","title":"func hitTest(NSPoint) -> NSView?","type":"method"},{"path":"\/documentation\/codeedittextview\/linefragmentview\/prepareforreuse()","title":"func prepareForReuse()","type":"method"},{"path":"\/documentation\/codeedittextview\/linefragmentview\/setlinefragment(_:fragmentrange:renderer:)","title":"func setLineFragment(LineFragment, fragmentRange: NSRange, renderer: LineFragmentRenderer)","type":"method"}],"path":"\/documentation\/codeedittextview\/linefragmentview","title":"LineFragmentView","type":"class"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/multistoragedelegate\/adddelegate(_:)","title":"func addDelegate(NSTextStorageDelegate)","type":"method"},{"path":"\/documentation\/codeedittextview\/multistoragedelegate\/removedelegate(_:)","title":"func removeDelegate(NSTextStorageDelegate)","type":"method"},{"path":"\/documentation\/codeedittextview\/multistoragedelegate\/textstorage(_:didprocessediting:range:changeinlength:)","title":"func textStorage(NSTextStorage, didProcessEditing: NSTextStorageEditActions, range: NSRange, changeInLength: Int)","type":"method"},{"path":"\/documentation\/codeedittextview\/multistoragedelegate\/textstorage(_:willprocessediting:range:changeinlength:)","title":"func textStorage(NSTextStorage, willProcessEditing: NSTextStorageEditActions, range: NSRange, changeInLength: Int)","type":"method"}],"path":"\/documentation\/codeedittextview\/multistoragedelegate","title":"MultiStorageDelegate","type":"class"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textattachmentmanager\/delegate","title":"var delegate: TextAttachmentManagerDelegate?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textattachmentmanager\/add(_:for:)","title":"func add(any TextAttachment, for: NSRange)","type":"method"},{"path":"\/documentation\/codeedittextview\/textattachmentmanager\/getattachmentsoverlapping(_:)","title":"func getAttachmentsOverlapping(NSRange) -> [AnyTextAttachment]","type":"method"},{"path":"\/documentation\/codeedittextview\/textattachmentmanager\/getattachmentsstartingin(_:)","title":"func getAttachmentsStartingIn(NSRange) -> [AnyTextAttachment]","type":"method"},{"path":"\/documentation\/codeedittextview\/textattachmentmanager\/remove(atoffset:)","title":"func remove(atOffset: Int) -> AnyTextAttachment?","type":"method"}],"path":"\/documentation\/codeedittextview\/textattachmentmanager","title":"TextAttachmentManager","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/typesetter\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/typesetter\/documentrange","title":"var documentRange: NSRange?","type":"property"},{"path":"\/documentation\/codeedittextview\/typesetter\/linefragments","title":"var lineFragments: TextLineStorage<LineFragment>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/typesetter\/typeset(_:documentrange:displaydata:markedranges:attachments:)","title":"func typeset(NSAttributedString, documentRange: NSRange, displayData: TextLine.DisplayData, markedRanges: MarkedRanges?, attachments: [AnyTextAttachment])","type":"method"}],"path":"\/documentation\/codeedittextview\/typesetter","title":"Typesetter","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/viewreusequeue\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/viewreusequeue\/queuedviews","title":"var queuedViews: Deque<View>","type":"property"},{"path":"\/documentation\/codeedittextview\/viewreusequeue\/usedviews","title":"var usedViews: [Key : View]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/viewreusequeue\/enqueueview(forkey:)","title":"func enqueueView(forKey: Key)","type":"method"},{"path":"\/documentation\/codeedittextview\/viewreusequeue\/enqueueviews(in:)","title":"func enqueueViews(in: Set<Key>)","type":"method"},{"path":"\/documentation\/codeedittextview\/viewreusequeue\/enqueueviews(notinset:)","title":"func enqueueViews(notInSet: Set<Key>)","type":"method"},{"path":"\/documentation\/codeedittextview\/viewreusequeue\/getorcreateview(forkey:createview:)","title":"func getOrCreateView(forKey: Key, createView: () -> View) -> View","type":"method"},{"path":"\/documentation\/codeedittextview\/viewreusequeue\/getview(forkey:)","title":"func getView(forKey: Key) -> View?","type":"method"}],"path":"\/documentation\/codeedittextview\/viewreusequeue","title":"ViewReuseQueue","type":"class"},{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/invisiblecharactersdelegate\/triggercharacters","title":"var triggerCharacters: Set<UInt16>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/invisiblecharactersdelegate\/invisiblestyle(for:at:linerange:)","title":"func invisibleStyle(for: UInt16, at: NSRange, lineRange: NSRange) -> InvisibleCharacterStyle?","type":"method"},{"path":"\/documentation\/codeedittextview\/invisiblecharactersdelegate\/invisiblestyleshouldclearcache()","title":"func invisibleStyleShouldClearCache() -> Bool","type":"method"}],"path":"\/documentation\/codeedittextview\/invisiblecharactersdelegate","title":"InvisibleCharactersDelegate","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textattachment\/isselected","title":"var isSelected: Bool","type":"property"},{"path":"\/documentation\/codeedittextview\/textattachment\/width","title":"var width: CGFloat","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/codeedittextview\/textattachment\/attachmentaction()-87rcy","title":"func attachmentAction() -> TextAttachmentAction","type":"method"}],"title":"TextAttachment Implementations","type":"groupMarker"}],"path":"\/documentation\/codeedittextview\/textattachment\/attachmentaction()","title":"func attachmentAction() -> TextAttachmentAction","type":"method"},{"path":"\/documentation\/codeedittextview\/textattachment\/draw(in:rect:)","title":"func draw(in: CGContext, rect: NSRect)","type":"method"}],"path":"\/documentation\/codeedittextview\/textattachment","title":"TextAttachment","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textattachmentmanagerdelegate\/textattachmentdidadd(_:for:)","title":"func textAttachmentDidAdd(any TextAttachment, for: NSRange)","type":"method"},{"path":"\/documentation\/codeedittextview\/textattachmentmanagerdelegate\/textattachmentdidremove(_:for:)","title":"func textAttachmentDidRemove(any TextAttachment, for: NSRange)","type":"method"}],"path":"\/documentation\/codeedittextview\/textattachmentmanagerdelegate","title":"TextAttachmentManagerDelegate","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textlayoutmanagerdelegate\/visiblerect","title":"var visibleRect: NSRect","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textlayoutmanagerdelegate\/layoutmanagerheightdidupdate(newheight:)","title":"func layoutManagerHeightDidUpdate(newHeight: CGFloat)","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanagerdelegate\/layoutmanagermaxwidthdidchange(newwidth:)","title":"func layoutManagerMaxWidthDidChange(newWidth: CGFloat)","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanagerdelegate\/layoutmanagertypingattributes()","title":"func layoutManagerTypingAttributes() -> [NSAttributedString.Key : Any]","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanagerdelegate\/layoutmanageryadjustment(_:)","title":"func layoutManagerYAdjustment(CGFloat)","type":"method"},{"path":"\/documentation\/codeedittextview\/textlayoutmanagerdelegate\/textviewportsize()","title":"func textViewportSize() -> CGSize","type":"method"}],"path":"\/documentation\/codeedittextview\/textlayoutmanagerdelegate","title":"TextLayoutManagerDelegate","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/codeedittextview\/textlayoutmanagerrenderdelegate\/characterxposition(in:for:)-c7ta","title":"func characterXPosition(in: LineFragment, for: Int) -> CGFloat","type":"method"}],"title":"TextLayoutManagerRenderDelegate Implementations","type":"groupMarker"}],"path":"\/documentation\/codeedittextview\/textlayoutmanagerrenderdelegate\/characterxposition(in:for:)","title":"func characterXPosition(in: LineFragment, for: Int) -> CGFloat","type":"method"},{"children":[{"children":[{"path":"\/documentation\/codeedittextview\/textlayoutmanagerrenderdelegate\/estimatedlineheight()-1xchi","title":"func estimatedLineHeight() -> CGFloat?","type":"method"}],"title":"TextLayoutManagerRenderDelegate Implementations","type":"groupMarker"}],"path":"\/documentation\/codeedittextview\/textlayoutmanagerrenderdelegate\/estimatedlineheight()","title":"func estimatedLineHeight() -> CGFloat?","type":"method"},{"children":[{"children":[{"path":"\/documentation\/codeedittextview\/textlayoutmanagerrenderdelegate\/linefragmentview(for:)-4crw7","title":"func lineFragmentView(for: LineFragment) -> LineFragmentView","type":"method"}],"title":"TextLayoutManagerRenderDelegate Implementations","type":"groupMarker"}],"path":"\/documentation\/codeedittextview\/textlayoutmanagerrenderdelegate\/linefragmentview(for:)","title":"func lineFragmentView(for: LineFragment) -> LineFragmentView","type":"method"},{"children":[{"children":[{"path":"\/documentation\/codeedittextview\/textlayoutmanagerrenderdelegate\/preparefordisplay(textline:displaydata:range:stringref:markedranges:attachments:)-ycsi","title":"func prepareForDisplay(textLine: TextLine, displayData: TextLine.DisplayData, range: NSRange, stringRef: NSTextStorage, markedRanges: MarkedRanges?, attachments: [AnyTextAttachment])","type":"method"}],"title":"TextLayoutManagerRenderDelegate Implementations","type":"groupMarker"}],"path":"\/documentation\/codeedittextview\/textlayoutmanagerrenderdelegate\/preparefordisplay(textline:displaydata:range:stringref:markedranges:attachments:)","title":"func prepareForDisplay(textLine: TextLine, displayData: TextLine.DisplayData, range: NSRange, stringRef: NSTextStorage, markedRanges: MarkedRanges?, attachments: [AnyTextAttachment])","type":"method"}],"path":"\/documentation\/codeedittextview\/textlayoutmanagerrenderdelegate","title":"TextLayoutManagerRenderDelegate","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textselectionmanagerdelegate\/visibletextrange","title":"var visibleTextRange: NSRange?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textselectionmanagerdelegate\/estimatedlineheight()","title":"func estimatedLineHeight() -> CGFloat","type":"method"},{"path":"\/documentation\/codeedittextview\/textselectionmanagerdelegate\/setneedsdisplay()","title":"func setNeedsDisplay()","type":"method"}],"path":"\/documentation\/codeedittextview\/textselectionmanagerdelegate","title":"TextSelectionManagerDelegate","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/codeedittextview\/textviewdelegate\/textview(_:didreplacecontentsin:with:)-5kxu6","title":"func textView(TextView, didReplaceContentsIn: NSRange, with: String)","type":"method"}],"title":"TextViewDelegate Implementations","type":"groupMarker"}],"path":"\/documentation\/codeedittextview\/textviewdelegate\/textview(_:didreplacecontentsin:with:)","title":"func textView(TextView, didReplaceContentsIn: NSRange, with: String)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/codeedittextview\/textviewdelegate\/textview(_:shouldreplacecontentsin:with:)-30pij","title":"func textView(TextView, shouldReplaceContentsIn: NSRange, with: String) -> Bool","type":"method"}],"title":"TextViewDelegate Implementations","type":"groupMarker"}],"path":"\/documentation\/codeedittextview\/textviewdelegate\/textview(_:shouldreplacecontentsin:with:)","title":"func textView(TextView, shouldReplaceContentsIn: NSRange, with: String) -> Bool","type":"method"},{"children":[{"children":[{"path":"\/documentation\/codeedittextview\/textviewdelegate\/textview(_:willreplacecontentsin:with:)-3xvva","title":"func textView(TextView, willReplaceContentsIn: NSRange, with: String)","type":"method"}],"title":"TextViewDelegate Implementations","type":"groupMarker"}],"path":"\/documentation\/codeedittextview\/textviewdelegate\/textview(_:willreplacecontentsin:with:)","title":"func textView(TextView, willReplaceContentsIn: NSRange, with: String)","type":"method"}],"path":"\/documentation\/codeedittextview\/textviewdelegate","title":"TextViewDelegate","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/anytextattachment\/==(_:_:)","title":"static func == (AnyTextAttachment, AnyTextAttachment) -> Bool","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/anytextattachment\/attachment","title":"let attachment: any TextAttachment","type":"property"},{"path":"\/documentation\/codeedittextview\/anytextattachment\/range","title":"var range: NSRange","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/anytextattachment\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/codeedittextview\/anytextattachment\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/codeedittextview\/anytextattachment","title":"AnyTextAttachment","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/emphasis\/init(range:style:flash:inactive:selectindocument:)","title":"init(range: NSRange, style: EmphasisStyle, flash: Bool, inactive: Bool, selectInDocument: Bool)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/emphasis\/flash","title":"let flash: Bool","type":"property"},{"path":"\/documentation\/codeedittextview\/emphasis\/inactive","title":"let inactive: Bool","type":"property"},{"path":"\/documentation\/codeedittextview\/emphasis\/range","title":"let range: NSRange","type":"property"},{"path":"\/documentation\/codeedittextview\/emphasis\/selectindocument","title":"let selectInDocument: Bool","type":"property"},{"path":"\/documentation\/codeedittextview\/emphasis\/style","title":"let style: EmphasisStyle","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/emphasis\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/codeedittextview\/emphasis\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/codeedittextview\/emphasis","title":"Emphasis","type":"struct"},{"path":"\/documentation\/codeedittextview\/markedranges","title":"MarkedRanges","type":"struct"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/emphasisstyle\/==(_:_:)","title":"static func == (EmphasisStyle, EmphasisStyle) -> Bool","type":"op"},{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/emphasisstyle\/outline(color:fill:)","title":"case outline(color: NSColor, fill: Bool)","type":"case"},{"path":"\/documentation\/codeedittextview\/emphasisstyle\/standard","title":"case standard","type":"case"},{"path":"\/documentation\/codeedittextview\/emphasisstyle\/underline(color:)","title":"case underline(color: NSColor)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/emphasisstyle\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/codeedittextview\/emphasisstyle\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/codeedittextview\/emphasisstyle","title":"EmphasisStyle","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/invisiblecharacterstyle\/emphasize(color:)","title":"case emphasize(color: NSColor)","type":"case"},{"path":"\/documentation\/codeedittextview\/invisiblecharacterstyle\/replace(replacementcharacter:color:font:)","title":"case replace(replacementCharacter: String, color: NSColor, font: NSFont)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/invisiblecharacterstyle\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/codeedittextview\/invisiblecharacterstyle\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/codeedittextview\/invisiblecharacterstyle","title":"InvisibleCharacterStyle","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/textattachmentaction\/discard","title":"case discard","type":"case"},{"path":"\/documentation\/codeedittextview\/textattachmentaction\/none","title":"case none","type":"case"},{"path":"\/documentation\/codeedittextview\/textattachmentaction\/replace(text:)","title":"case replace(text: String)","type":"case"}],"path":"\/documentation\/codeedittextview\/textattachmentaction","title":"TextAttachmentAction","type":"enum"},{"title":"Extended Modules","type":"groupMarker"},{"children":[{"title":"Extended Classes","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/appkit\/nsbezierpath\/cgpathfallback","title":"var cgPathFallback: CGPath","type":"property"}],"path":"\/documentation\/codeedittextview\/appkit\/nsbezierpath","title":"NSBezierPath","type":"extension"}],"path":"\/documentation\/codeedittextview\/appkit","title":"AppKit","type":"extension"},{"children":[{"title":"Extended Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/corefoundation\/cgpoint\/pixelaligned","title":"var pixelAligned: NSPoint","type":"property"}],"path":"\/documentation\/codeedittextview\/corefoundation\/cgpoint","title":"CGPoint","type":"extension"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/codeedittextview\/corefoundation\/cgrect\/pixelaligned","title":"var pixelAligned: NSRect","type":"property"}],"path":"\/documentation\/codeedittextview\/corefoundation\/cgrect","title":"CGRect","type":"extension"}],"path":"\/documentation\/codeedittextview\/corefoundation","title":"CoreFoundation","type":"extension"}],"path":"\/documentation\/codeedittextview","title":"CodeEditTextView","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":2}}